# CAENVME.PY Makefile
#
# This is my poor attempt of a portable Makefile, in principle this should work
# on different Linux machines
#
# For additional info look for 'Makefile' or 'cython' tutorials or documentation.
#
# 2013 Christian Strandhagen - strandhagen _at_ pit.physik.uni-tuebingen.de

# CC is the compiler to be used
CC=gcc
# CFLAGS are the relevant compiler flags (e.g. shared and fPIC for a shared 
# library, O2 for optimizations, Wall to display all warnings, ...)


CFLAGS=-shared -pthread -fPIC -fwrapv -O2 -Wall -fno-strict-aliasing -DLINUX
# LDFLAGS are the linker flags, lCAENVME means we are linking against the
# pre-compiled CAENVMElib (if there are errors check your LD_LIBRARY_PATH)
LDFLAGS=-lCAENVME
# INCLUDES specifies additional directories for headers, here we get the path
# for the python headers from executing 'python-config'
INCLUDES=-I/usr/lib64/python2.7/site-packages/numpy/core/include 
INCLUDES +=$(shell python-config --includes)
# CYTHON is the cython command 
CYTHON=cython
# CYTHONFLAGS are options for cython, we do not need any here
CYTHONFLAGS=
# SOURCES in this case are the pyx files
SOURCES=$(wildcard *.pyx)
# OBJECTS in this case are the c files generated from the pyx files by cython
# (technically these are the sources we need to compile)
OBJECTS=$(SOURCES:.pyx=.c)
# LIBRARY is the name of the resulting library file, which is the same as the
# pyx file
LIBRARY=$(SOURCES:.pyx=.so)
# PREFIX is the system directory where all the python stuff is located (e.g. /usr,
# /usr/local, /opt/, ...), this we get by executing python-config
PREFIX = $(shell python-config --prefix)
# PYTHON_VERSION are the first two digits of the python version used by the
# system, we get them directly from a small python script
PYTHON_VERSION = $(shell python -c "import sys; print sys.version[:3]")

# default target 'all' runs cython and compiles the generated c file
all: $(OBJECTS) $(LIBRARY)

# 'LIBRARY' target, compiles the generated c file into a shared library
$(LIBRARY): $(OBJECTS)
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) $(OBJECTS) -o $@

# 'OBJECTS' target, runs cython on the pyx files to generate the c files
$(OBJECTS):$(SOURCES)
	$(CYTHON) $(CYTHONFLAGS) $<

# 'clean' target, removes the c files generated by cython and the compiled 
# library		
clean:
	rm $(OBJECTS) $(LIBRARY)

# 'install' target, copies the compiled library to the site-packages directory of 
# python, so all users should be able to use it (probably needs sudo privileges)	
install:
	cp $(LIBRARY) $(PREFIX)/lib/python$(PYTHON_VERSION)/site-packages

# 'uninstall' target, removes the library from the site-packages directory, so it
# is no longer available for all users (probably nees sudo privileges)
uninstall:
	rm $(LIBRARY) $(PREFIX)/lib/python$(PYTHON_VERSION)/site-packages

 
